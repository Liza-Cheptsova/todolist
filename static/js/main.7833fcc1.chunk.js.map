{"version":3,"sources":["state/reducers/app-reducer.ts","api/todolist-api.ts","utils/error-utils.ts","state/reducers/auth-reducer.ts","components/header/Header.tsx","components/errorSnackbar/ErrorSnackbar.tsx","api/tasks-api.ts","components/features/login/Login.tsx","state/reducers/todolist-reducer.ts","components/formItems/Title.tsx","components/ editableSpan/EditableSpan.tsx","state/reducers/tasks-reducer.ts","components/todolists/tasks/Tasks.tsx","components/todolists/Todolist.tsx","components/todolists/TodolistsList.tsx","App.tsx","serviceWorker.ts","state/store.ts","index.tsx"],"names":["initialState","status","error","SetAppStatus","type","SetAppError","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","put","delete","authAPI","data","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","isLoggedIn","isInitialized","setIsLoggedInAC","value","Header","useSelector","state","app","auth","useDispatch","AppBar","position","Toolbar","className","IconButton","edge","color","aria-label","Button","onClick","then","res","resultCode","catch","LinearProgress","Alert","props","elevation","variant","ErrorSnackbar","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","TaskStatuses","TaskPriorities","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","to","Grid","container","justify","alignItems","item","handleSubmit","FormControl","FormLabel","href","target","FormGroup","TextField","label","margin","getFieldProps","touched","style","FormControlLabel","control","Checkbox","todolistId1","v1","Title","React","memo","useState","taskTitle","setTaskTitle","setError","addTaskHandler","trim","addTask","disabled","helperText","onChange","e","preventDefault","currentTarget","onKeyPress","charCode","AddBox","EditableSpan","editMode","setEditMode","setTitle","console","log","activeViewMode","newTitle","autoFocus","onBlur","onDoubleClick","taskAPI","taskId","modal","id","Completed","description","completed","priority","Low","startDate","deadline","todoListId","order","addedDate","entityStatus","updateTaskTC","domainModel","getState","task","tasks","find","t","model","updateTaskAC","Task","addNewTitle","useCallback","key","inputProps","checked","New","setTaskEntityStatus","removeTaskAC","DeleteForever","Todolist","todolist","useEffect","items","setTasksAC","removeTodolistHandler","removeTodolist","addTaskItem","addTaskAC","addTaskThunk","newTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","allTaskForTodolist","tasksForTodolist","filter","map","TodolistsList","todolists","removeTodolistAC","changeTodolistFilterAC","addNewTodolist","addTodolistTC","changeTodolistTitleAC","Container","fixed","padding","spacing","tl","Paper","App","exact","path","render","from","Boolean","window","location","hostname","match","rootReducers","combineReducers","action","newTodolist","stateCopy","newTask","newTasks","forEach","store","createStore","applyMiddleware","thunk","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7833fcc1.chunk.js","sourcesContent":["const initialState = {\r\n  status: \"loading\" as RequestStatusType,\r\n  error: null as null | string,\r\n};\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"APP/SET-STATUS\":\r\n      return { ...state, status: action.status };\r\n    case \"APP/SET-ERROR\":\r\n      return { ...state, error: action.error };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//actions\r\nexport const SetAppStatus = (status: RequestStatusType) => {\r\n  return { type: \"APP/SET-STATUS\", status } as const;\r\n};\r\n\r\nexport const SetAppError = (error: string | null) => {\r\n  return { type: \"APP/SET-ERROR\", error } as const;\r\n};\r\n\r\n//types\r\ntype ActionsType = ReturnType<typeof SetAppStatus> | ReturnType<typeof SetAppError>;\r\nexport type RequestStatusType = \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\r\nexport type InitialStateType = typeof initialState;\r\n","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1/\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"API-KEY\": \"94c9f385-f2db-498c-b99f-a10b7cce6547\",\r\n  },\r\n});\r\n\r\nexport type TodolistsType = {\r\n  id: string;\r\n  addedDate: string;\r\n  order: number;\r\n  title: string;\r\n};\r\n\r\nexport type LoginParamsType = {\r\n  email: string;\r\n  password: string;\r\n  rememberMe: boolean;\r\n  captch?: string;\r\n};\r\n\r\nexport type ResponceType<T = {}> = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: T;\r\n};\r\n\r\nexport const todolistAPI = {\r\n  getTodolist() {\r\n    return instance.get<Array<TodolistsType>>(`todo-lists`);\r\n  },\r\n\r\n  addTodolist(title: string) {\r\n    return instance.post<ResponceType<{ item: TodolistsType }>>(`todo-lists`, { title: title });\r\n  },\r\n\r\n  updateTodolist(todolistId: string, title: string) {\r\n    return instance.put<ResponceType>(`todo-lists/${todolistId}`, { title: title });\r\n  },\r\n\r\n  deleteTodoist(todolistId: string) {\r\n    return instance.delete<ResponceType>(`todo-lists/${todolistId}`);\r\n  },\r\n};\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<ResponceType<{ userId: number }>>(`auth/login`, data);\r\n  },\r\n  me() {\r\n    return instance.get<ResponceType<{ id: number; email: string; login: string }>>(`auth/me`);\r\n  },\r\n  logout() {\r\n    return instance.delete<ResponceType>(`auth/login`);\r\n  },\r\n};\r\n","import { Dispatch } from \"redux\";\r\nimport { ResponceType } from \"../api/todolist-api\";\r\nimport { SetAppError, SetAppStatus } from \"../state/reducers/app-reducer\";\r\n\r\n// generic function\r\nexport const handleServerAppError = <T>(data: ResponceType<T>, dispatch: Dispatch) => {\r\n  if (data.messages.length) {\r\n    dispatch(SetAppError(data.messages[0]));\r\n  } else {\r\n    dispatch(SetAppError(\"Some error occurred\"));\r\n  }\r\n  dispatch(SetAppStatus(\"failed\"));\r\n};\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch) => {\r\n  dispatch(SetAppError(error.message));\r\n  dispatch(SetAppStatus(\"failed\"));\r\n};\r\n\r\n// type ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>\r\n","import { Dispatch } from \"redux\";\r\nimport { LoginParamsType } from \"../../api/todolist-api\";\r\nimport { SetAppStatus } from \"./app-reducer\";\r\nimport { authAPI } from \"./../../api/todolist-api\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../utils/error-utils\";\r\n\r\nconst initialState = {\r\n  isLoggedIn: false,\r\n  isInitialized: false,\r\n};\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n  switch (action.type) {\r\n    case \"login/SET-IS-LOGGED-IN\":\r\n      return { ...state, isLoggedIn: action.value };\r\n    case \"login/SET-INITIALIZED\":\r\n      return { ...state, isInitialized: action.value };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n// actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({ type: \"login/SET-IS-LOGGED-IN\", value } as const);\r\nexport const setisInitializedAC = (value: boolean) => ({ type: \"login/SET-INITIALIZED\", value } as const);\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: Dispatch) => {\r\n  dispatch(SetAppStatus(\"loading\"));\r\n  authAPI\r\n    .login(data)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(true));\r\n        dispatch(SetAppStatus(\"succeeded\"));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI\r\n    .me()\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setisInitializedAC(true));\r\n        dispatch(setIsLoggedInAC(true));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n  dispatch(SetAppStatus(\"loading\"));\r\n  authAPI\r\n    .logout()\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(setIsLoggedInAC(false));\r\n        dispatch(SetAppStatus(\"succeeded\"));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\n// types\r\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | ReturnType<typeof setisInitializedAC>;\r\ntype InitialStateType = typeof initialState;\r\n","import React from \"react\";\r\nimport { AppBar, Button, IconButton, LinearProgress, Toolbar } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RequestStatusType } from \"../../state/reducers/app-reducer\";\r\nimport { RootStateType } from \"../../state/store\";\r\nimport { logoutTC } from \"../../state/reducers/auth-reducer\";\r\n\r\nexport const Header = () => {\r\n  const status = useSelector<RootStateType, RequestStatusType>((state) => state.app.status);\r\n  const isLoggedIn = useSelector<RootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n  const dispatch = useDispatch();\r\n\r\n  const logoutHandler = () => {\r\n    dispatch(logoutTC());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar position='static'>\r\n        <Toolbar className={\"header\"}>\r\n          <IconButton edge='start' color='inherit' aria-label='menu'>\r\n            <MenuIcon />\r\n          </IconButton>\r\n          {isLoggedIn && (\r\n            <Button color='inherit' onClick={logoutHandler}>\r\n              LogOut\r\n            </Button>\r\n          )}\r\n        </Toolbar>\r\n      </AppBar>\r\n      <div>{status === \"loading\" && <LinearProgress />}</div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport MuiAlert, { AlertProps } from \"@material-ui/lab/Alert\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootStateType } from \"../../state/store\";\r\nimport { SetAppError } from \"../../state/reducers/app-reducer\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n  return <MuiAlert elevation={6} variant='filled' {...props} />;\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n  const error = useSelector<RootStateType, string | null>((state) => state.app.error);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n    // if (reason === \"clickaway\") {\r\n    //   return;\r\n    // }\r\n    dispatch(SetAppError(null));\r\n  };\r\n\r\n  return (\r\n    <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity='error'>\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}\r\n","import axios from \"axios\";\r\nimport { RequestStatusType } from \"../state/reducers/app-reducer\";\r\n\r\nconst instance = axios.create({\r\n  baseURL: \"https://social-network.samuraijs.com/api/1.1//todo-lists/\",\r\n  withCredentials: true,\r\n  headers: {\r\n    \"API-KEY\": \"94c9f385-f2db-498c-b99f-a10b7cce6547\",\r\n  },\r\n});\r\n\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft = 3,\r\n}\r\n\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  Hi = 2,\r\n  Urgently = 3,\r\n  Later = 4,\r\n}\r\n\r\nexport type TaskType = {\r\n  description: string;\r\n  title: string;\r\n  completed: boolean;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  startDate: null | string;\r\n  deadline: null | string;\r\n  id: string;\r\n  todoListId: string;\r\n  order: number;\r\n  addedDate: string;\r\n  entityStatus: RequestStatusType;\r\n};\r\n\r\nexport type GetTasksType = {\r\n  error: string | null;\r\n  totalCount: number;\r\n  items: Array<TaskType>;\r\n};\r\n\r\nexport type UpdateTaskModelType = {\r\n  description: string;\r\n  title: string;\r\n  status: TaskStatuses;\r\n  priority: TaskPriorities;\r\n  deadline: null | string;\r\n  startDate: null | string;\r\n};\r\n\r\nexport type ResponceTaskType = {\r\n  resultCode: number;\r\n  messages: Array<string>;\r\n  data: { item: TaskType };\r\n};\r\n\r\nexport const taskAPI = {\r\n  getTasks(todolistId: string) {\r\n    return instance.get<GetTasksType>(`${todolistId}/tasks`);\r\n  },\r\n\r\n  addTask(todolistId: string, title: string) {\r\n    return instance.post<ResponceTaskType>(`${todolistId}/tasks`, { title: title });\r\n  },\r\n\r\n  updateTask(todolistId: string, taskId: string, modal: UpdateTaskModelType) {\r\n    return instance.put<ResponceTaskType>(`${todolistId}/tasks/${taskId}`, modal);\r\n  },\r\n\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponceTaskType>(`${todolistId}/tasks/${taskId}`);\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport {\r\n  Checkbox,\r\n  FormControl,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  FormLabel,\r\n  TextField,\r\n  Button,\r\n  Grid,\r\n} from \"@material-ui/core\";\r\nimport { useFormik } from \"formik\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { loginTC } from \"../../../state/reducers/auth-reducer\";\r\nimport { RootStateType } from \"../../../state/store\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport \"../../../App\";\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const isLoggedIn = useSelector<RootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n\r\n  type FormikErrorType = {\r\n    email?: string;\r\n    password?: string;\r\n    rememberMe?: boolean;\r\n  };\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: \"cheptsova.liza@mail.ru\",\r\n      password: \"7646412qwe\",\r\n      rememberMe: false,\r\n    },\r\n    validate: (values) => {\r\n      const errors: FormikErrorType = {};\r\n      if (!values.email) {\r\n        errors.email = \"Required\";\r\n      } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = \"Invalid email address\";\r\n      }\r\n\r\n      if (!values.password) {\r\n        errors.password = \"Required\";\r\n      } else if (values.password.length < 5) {\r\n        errors.password = \"Must be more then 5 characters\";\r\n      }\r\n      return errors;\r\n    },\r\n    onSubmit: (values) => {\r\n      dispatch(loginTC(values));\r\n      formik.resetForm();\r\n    },\r\n  });\r\n\r\n  if (isLoggedIn) {\r\n    return <Redirect to={\"/\"} />;\r\n  }\r\n\r\n  return (\r\n    <Grid container justify=\"center\" alignItems=\"center\" className={\"height_login\"}>\r\n      <Grid item>\r\n        <form onSubmit={formik.handleSubmit}>\r\n          <FormControl>\r\n            <FormLabel>\r\n              <p>\r\n                To log in get registered\r\n                <a href={\"https://social-network.samuraijs.com/\"} target={\"_blank\"}>\r\n                  here\r\n                </a>\r\n              </p>\r\n              <p>or use common test account credentials:</p>\r\n              <p>Email: free@samuraijs.com</p>\r\n              <p>Password: free</p>\r\n            </FormLabel>\r\n            <FormGroup>\r\n              <TextField label=\"Email\" margin=\"normal\" {...formik.getFieldProps(\"email\")} />\r\n              {formik.touched.email && formik.errors.email ? (\r\n                <div style={{ color: \"red\" }}>{formik.errors.email}</div>\r\n              ) : null}\r\n              <TextField type=\"password\" label=\"Password\" margin=\"normal\" {...formik.getFieldProps(\"password\")} />\r\n              {formik.touched.password && formik.errors.password ? (\r\n                <div style={{ color: \"red\" }}>{formik.errors.password}</div>\r\n              ) : null}\r\n              <FormControlLabel\r\n                label={\"Remember me\"}\r\n                className={\"mb\"}\r\n                control={<Checkbox {...formik.getFieldProps(\"rememberMe\")} />}\r\n              />\r\n              <Button type={\"submit\"} variant={\"contained\"} color={\"primary\"}>\r\n                Login\r\n              </Button>\r\n            </FormGroup>\r\n          </FormControl>\r\n        </form>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n","import { Dispatch } from \"redux\";\r\nimport { v1 } from \"uuid\";\r\nimport { TodolistsType } from \"../../api/todolist-api\";\r\nimport { todolistAPI } from \"./../../api/todolist-api\";\r\nimport { RequestStatusType, SetAppStatus } from \"./app-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"./../../utils/error-utils\";\r\n\r\nexport const todolistId1 = v1();\r\nexport const todolistId2 = v1();\r\n\r\nconst initialState: Array<TodolistDomainType> = [];\r\n\r\nexport const todolistReducer = (\r\n  state: Array<TodolistDomainType> = initialState,\r\n  action: ActionsTypes\r\n): Array<TodolistDomainType> => {\r\n  switch (action.type) {\r\n    case \"REMOVE-TODOLIST\": {\r\n      return state.filter((tl) => tl.id !== action.id);\r\n    }\r\n\r\n    case \"ADD-TODOLIST\": {\r\n      const newTodolist: TodolistDomainType = { ...action.todolist, filter: \"all\", entityStatus: \"idle\" };\r\n      return [newTodolist, ...state];\r\n    }\r\n\r\n    case \"CHANGE-TODOLIST-TITLE\": {\r\n      let newTodolistTitle = state.find((tl) => tl.id === action.id);\r\n      if (newTodolistTitle) {\r\n        newTodolistTitle.title = action.title;\r\n      }\r\n      return [...state];\r\n    }\r\n\r\n    case \"CHANGE-TODOLIST-FILTER\": {\r\n      let todolist = state.find((tl) => tl.id === action.id);\r\n      if (todolist) {\r\n        todolist.filter = action.filter;\r\n      }\r\n      return [...state];\r\n    }\r\n\r\n    case \"SET-TODOLIST\": {\r\n      return action.todolists.map((tl) => ({\r\n        ...tl,\r\n        filter: \"all\",\r\n        entityStatus: \"idle\",\r\n      }));\r\n    }\r\n\r\n    case \"CHANGE-TODOLIST-ENTITY-STATUS\": {\r\n      return state.map((tl) => (tl.id === action.id ? { ...tl, entityStatus: action.entityStatus } : tl));\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//actions\r\nexport const removeTodolistAC = (todolistId: string) => {\r\n  return { type: \"REMOVE-TODOLIST\", id: todolistId } as const;\r\n};\r\n\r\nexport const addTodolistAC = (todolist: TodolistsType) => {\r\n  return { type: \"ADD-TODOLIST\", todolist } as const;\r\n};\r\n\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => {\r\n  return { type: \"CHANGE-TODOLIST-TITLE\", id: todolistId, title: title } as const;\r\n};\r\n\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, todolistId: string) => {\r\n  return { type: \"CHANGE-TODOLIST-FILTER\", filter: filter, id: todolistId } as const;\r\n};\r\n\r\nexport const setTodolistAC = (todolists: Array<TodolistsType>) => {\r\n  return { type: \"SET-TODOLIST\", todolists } as const;\r\n};\r\n\r\nexport const setTodolistchangeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType) => {\r\n  return { type: \"CHANGE-TODOLIST-ENTITY-STATUS\", id, entityStatus } as const;\r\n};\r\n\r\n//thunk\r\nexport const fetchTodolistsThunk = () => (dispatch: Dispatch) => {\r\n  dispatch(SetAppStatus(\"loading\"));\r\n  todolistAPI\r\n    .getTodolist()\r\n    .then((res) => {\r\n      dispatch(setTodolistAC(res.data));\r\n      dispatch(SetAppStatus(\"succeeded\"));\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const deleteTodolistTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(SetAppStatus(\"loading\"));\r\n  dispatch(setTodolistchangeTodolistEntityStatusAC(todolistId, \"loading\"));\r\n  todolistAPI\r\n    .deleteTodoist(todolistId)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(removeTodolistAC(todolistId));\r\n        dispatch(SetAppStatus(\"succeeded\"));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n  dispatch(SetAppStatus(\"loading\"));\r\n  todolistAPI\r\n    .addTodolist(title)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        const newTitle = res.data.data.item;\r\n        dispatch(addTodolistAC(newTitle));\r\n        dispatch(SetAppStatus(\"succeeded\"));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const updateTodolistTitle = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n  dispatch(SetAppStatus(\"loading\"));\r\n  todolistAPI\r\n    .updateTodolist(todolistId, title)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(changeTodolistTitleAC(todolistId, title));\r\n        dispatch(SetAppStatus(\"succeeded\"));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\n//types\r\nexport type ActionsTypes =\r\n  | ReturnType<typeof removeTodolistAC>\r\n  | ReturnType<typeof addTodolistAC>\r\n  | ReturnType<typeof changeTodolistTitleAC>\r\n  | ReturnType<typeof changeTodolistFilterAC>\r\n  | ReturnType<typeof setTodolistAC>\r\n  | ReturnType<typeof setTodolistchangeTodolistEntityStatusAC>;\r\n\r\nexport type RemoveTodolistAT = {\r\n  type: \"REMOVE-TODOLIST\";\r\n  id: string;\r\n};\r\n\r\nexport type AddTodolistAT = {\r\n  type: \"ADD-TODOLIST\";\r\n  todolist: TodolistsType;\r\n};\r\n\r\nexport type SetTodolistType = {\r\n  type: \"SET-TODOLIST\";\r\n  todolists: Array<TodolistsType>;\r\n};\r\n\r\nexport type FilterValuesType = \"all\" | \"completed\" | \"active\";\r\n\r\nexport type TodolistDomainType = TodolistsType & {\r\n  filter: FilterValuesType;\r\n  entityStatus: RequestStatusType;\r\n};\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\nimport { IconButton, TextField } from \"@material-ui/core\";\r\nimport { AddBox } from \"@material-ui/icons\";\r\n\r\ntype PropsType = {\r\n  addTask: (title: string) => void;\r\n  disabled?: boolean;\r\n};\r\n\r\nexport const Title = React.memo((props: PropsType) => {\r\n  const [taskTitle, setTaskTitle] = useState(\"\");\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const newTaskTitleHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    e.preventDefault();\r\n    setTaskTitle(e.currentTarget.value);\r\n  };\r\n\r\n  const addTaskHandler = () => {\r\n    if (taskTitle.trim() !== \"\") {\r\n      props.addTask(taskTitle);\r\n      setTaskTitle(\"\");\r\n    } else {\r\n      setError(\"Title is required\");\r\n    }\r\n  };\r\n\r\n  const addTaskOnKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null) setError(null);\r\n    if (e.charCode === 13) {\r\n      addTaskHandler();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        value={taskTitle}\r\n        disabled={props.disabled}\r\n        label='Введите текст'\r\n        helperText={error}\r\n        error={!!error}\r\n        onChange={newTaskTitleHandler}\r\n        onKeyPress={addTaskOnKeyPressHandler}\r\n        color={\"primary\"}\r\n        variant='outlined'\r\n      />\r\n      <IconButton color={\"primary\"} onClick={addTaskHandler} disabled={props.disabled}>\r\n        <AddBox />\r\n      </IconButton>\r\n    </div>\r\n  );\r\n});\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from \"react\";\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n  value: string;\r\n  newTitle: (newTitle: string) => void;\r\n  disabled?: boolean;\r\n};\r\n\r\nexport const EditableSpan = React.memo((props: PropsType) => {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [title, setTitle] = useState(props.value);\r\n\r\n  const onDblClickHandler = () => {\r\n    setEditMode(!editMode);\r\n    setTitle(props.value);\r\n    if (props.disabled) {\r\n      setEditMode(false);\r\n    }\r\n  };\r\n\r\n  console.log(\"props.disabled: \", props.disabled);\r\n\r\n  const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value);\r\n  };\r\n\r\n  const activeViewMode = () => {\r\n    setEditMode(!editMode);\r\n    if (title.trim() !== \"\") {\r\n      props.newTitle(title);\r\n    }\r\n  };\r\n\r\n  const addTaskOnKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.charCode === 13) {\r\n      activeViewMode();\r\n    }\r\n  };\r\n\r\n  return editMode ? (\r\n    <TextField\r\n      type='text'\r\n      value={title}\r\n      onChange={changeTitle}\r\n      autoFocus\r\n      onBlur={activeViewMode}\r\n      onKeyPress={addTaskOnKeyPressHandler}\r\n    />\r\n  ) : (\r\n    <span onDoubleClick={onDblClickHandler}>{props.value}</span>\r\n  );\r\n});\r\n","import { v1 } from \"uuid\";\r\nimport { AddTodolistAT, RemoveTodolistAT, SetTodolistType, todolistId1 } from \"./todolist-reducer\";\r\nimport { taskAPI, TaskPriorities, TaskStatuses, TaskType } from \"../../api/tasks-api\";\r\nimport { Dispatch } from \"redux\";\r\nimport { RootStateType } from \"../store\";\r\nimport { RequestStatusType, SetAppStatus } from \"./app-reducer\";\r\nimport { handleServerAppError, handleServerNetworkError } from \"../../utils/error-utils\";\r\n\r\nconst initialState: TaskStateType = {\r\n  [todolistId1]: [\r\n    {\r\n      id: v1(),\r\n      title: \"HTML\",\r\n      status: TaskStatuses.Completed,\r\n      description: \"\",\r\n      completed: false,\r\n      priority: TaskPriorities.Low,\r\n      startDate: \"\",\r\n      deadline: \"\",\r\n      todoListId: todolistId1,\r\n      order: 0,\r\n      addedDate: \"\",\r\n      entityStatus: \"idle\",\r\n    },\r\n  ],\r\n};\r\n\r\nexport const tasksReducer = (state: TaskStateType = initialState, action: ActionsTypes): TaskStateType => {\r\n  switch (action.type) {\r\n    case \"REMOVE-TASK\": {\r\n      const stateCopy = { ...state };\r\n      const tasks = state[action.todolistId];\r\n      stateCopy[action.todolistId] = tasks.filter((t) => t.id !== action.taskId);\r\n      return stateCopy;\r\n    }\r\n\r\n    case \"ADD-TASK\": {\r\n      const stateCopy = { ...state };\r\n      let newTask = action.task;\r\n      let task = stateCopy[newTask.todoListId];\r\n      const newTasks = [newTask, ...task];\r\n      stateCopy[newTask.todoListId] = newTasks;\r\n      return stateCopy;\r\n    }\r\n\r\n    case \"SET-TASK\": {\r\n      const stateCopy = { ...state };\r\n      stateCopy[action.todolistId] = action.tasks;\r\n      return stateCopy;\r\n    }\r\n\r\n    case \"UPDATE-TASK\": {\r\n      const stateCopy = { ...state };\r\n      let tasks = stateCopy[action.todolistId];\r\n      stateCopy[action.todolistId] = tasks.map((t) => (t.id === action.taskId ? { ...t, ...action.model } : t));\r\n\r\n      return stateCopy;\r\n    }\r\n\r\n    case \"NEW-TASK-TITLE\": {\r\n      const stateCopy = { ...state };\r\n      stateCopy[action.todolistId] = stateCopy[action.todolistId].map((t) =>\r\n        t.id === action.taskId ? { ...t, title: action.newTitle } : t\r\n      );\r\n      return stateCopy;\r\n    }\r\n\r\n    case \"ADD-TODOLIST\": {\r\n      return {\r\n        ...state,\r\n        [action.todolist.id]: [],\r\n      };\r\n    }\r\n\r\n    case \"REMOVE-TODOLIST\": {\r\n      const stateCopy = { ...state };\r\n      delete stateCopy[action.id];\r\n      return stateCopy;\r\n    }\r\n\r\n    case \"SET-TODOLIST\": {\r\n      const stateCopy = { ...state };\r\n      action.todolists.forEach((tl) => {\r\n        stateCopy[tl.id] = [];\r\n      });\r\n      return stateCopy;\r\n    }\r\n\r\n    case \"SET-TASK-ENTITY-STATUS\": {\r\n      const stateCopy = { ...state };\r\n      stateCopy[action.todolistId] = stateCopy[action.todolistId].map((t) =>\r\n        t.id === action.taskId ? { ...t, entityStatus: action.entityStatus } : t\r\n      );\r\n      return stateCopy;\r\n    }\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n//actions\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => {\r\n  return { type: \"REMOVE-TASK\", taskId, todolistId } as const;\r\n};\r\n\r\nexport const addTaskAC = (task: TaskType) => {\r\n  return { type: \"ADD-TASK\", task } as const;\r\n};\r\n\r\nexport const updateTaskAC = (taskId: string, model: UpdateDomainTaskModelType, todolistId: string) => {\r\n  return { type: \"UPDATE-TASK\", taskId, model, todolistId } as const;\r\n};\r\n\r\nexport const newTaskTitleAC = (taskId: string, newTitle: string, todolistId: string) => {\r\n  return { type: \"NEW-TASK-TITLE\", taskId, newTitle, todolistId } as const;\r\n};\r\n\r\nexport const setTasksAC = (tasks: Array<TaskType>, todolistId: string): SetTaskType => {\r\n  return { type: \"SET-TASK\", tasks, todolistId };\r\n};\r\n\r\nexport const setTaskEntityStatus = (todolistId: string, taskId: string, entityStatus: RequestStatusType) => {\r\n  return { type: \"SET-TASK-ENTITY-STATUS\", todolistId, taskId, entityStatus } as const;\r\n};\r\n\r\n//thunk\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n  dispatch(SetAppStatus(\"loading\"));\r\n  taskAPI.getTasks(todolistId).then((res) => {\r\n    const tasks = res.data.items;\r\n    dispatch(setTasksAC(tasks, todolistId));\r\n    dispatch(SetAppStatus(\"succeeded\"));\r\n  });\r\n};\r\n\r\nexport const deleteTaskThunk = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n  dispatch(SetAppStatus(\"loading\"));\r\n  dispatch(setTaskEntityStatus(todolistId, taskId, \"loading\"));\r\n  taskAPI\r\n    .deleteTask(todolistId, taskId)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        dispatch(removeTaskAC(todolistId, taskId));\r\n        dispatch(SetAppStatus(\"succeeded\"));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const addTaskThunk = (todolistId: string, title: string) => (dispatch: Dispatch) => {\r\n  dispatch(SetAppStatus(\"loading\"));\r\n  taskAPI\r\n    .addTask(todolistId, title)\r\n    .then((res) => {\r\n      if (res.data.resultCode === 0) {\r\n        const task = res.data.data.item;\r\n        dispatch(addTaskAC(task));\r\n        dispatch(SetAppStatus(\"succeeded\"));\r\n      } else {\r\n        handleServerAppError(res.data, dispatch);\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error, dispatch);\r\n    });\r\n};\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) => {\r\n  return (dispatch: Dispatch, getState: () => RootStateType) => {\r\n    dispatch(SetAppStatus(\"loading\"));\r\n    const task = getState().tasks[todolistId].find((t) => t.id === taskId);\r\n    if (task) {\r\n      taskAPI\r\n        .updateTask(todolistId, taskId, {\r\n          title: task.title,\r\n          startDate: task.startDate,\r\n          priority: task.priority,\r\n          description: task.description,\r\n          deadline: task.deadline,\r\n          status: task.status,\r\n          ...domainModel,\r\n        })\r\n        .then((res) => {\r\n          if (res.data.resultCode === 0) {\r\n            dispatch(updateTaskAC(taskId, domainModel, todolistId));\r\n            dispatch(SetAppStatus(\"succeeded\"));\r\n          } else {\r\n            handleServerAppError(res.data, dispatch);\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          handleServerNetworkError(error, dispatch);\r\n        });\r\n    }\r\n  };\r\n};\r\n\r\n//types\r\nexport type TaskStateType = {\r\n  [key: string]: Array<TaskType>;\r\n};\r\n\r\nexport type UpdateDomainTaskModelType = {\r\n  description?: string;\r\n  title?: string;\r\n  status?: TaskStatuses;\r\n  priority?: TaskPriorities;\r\n  deadline?: null | string;\r\n  startDate?: null | string;\r\n};\r\n\r\ntype SetTaskType = {\r\n  type: \"SET-TASK\";\r\n  tasks: Array<TaskType>;\r\n  todolistId: string;\r\n};\r\n\r\nexport type ActionsTypes =\r\n  | ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | ReturnType<typeof newTaskTitleAC>\r\n  | ReturnType<typeof setTaskEntityStatus>\r\n  | SetTaskType\r\n  | RemoveTodolistAT\r\n  | AddTodolistAT\r\n  | SetTodolistType;\r\n","import React, { ChangeEvent, useCallback } from \"react\";\r\nimport { deleteTaskThunk, updateTaskTC } from \"../../../state/reducers/tasks-reducer\";\r\nimport { Checkbox, IconButton } from \"@material-ui/core\";\r\nimport { EditableSpan } from \"../../ editableSpan/EditableSpan\";\r\nimport { DeleteForever } from \"@material-ui/icons\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { TaskStatuses, TaskType } from \"../../../api/tasks-api\";\r\n\r\ntype PropsType = {\r\n  task: TaskType;\r\n  todolistId: string;\r\n  disabled?: boolean;\r\n};\r\n\r\nexport const Task = React.memo((props: PropsType) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const removeTaskHandler = () => dispatch(deleteTaskThunk(props.todolistId, props.task.id));\r\n  const onChangeStatusHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    let newStatusValue = e.currentTarget.checked;\r\n    let status = newStatusValue ? TaskStatuses.Completed : TaskStatuses.New;\r\n    dispatch(updateTaskTC(props.task.id, { status }, props.todolistId));\r\n  };\r\n\r\n  const addNewTitle = useCallback(\r\n    (newTitle: string) => {\r\n      dispatch(updateTaskTC(props.task.id, { title: newTitle }, props.todolistId));\r\n    },\r\n    [dispatch, props.todolistId, props.task.id]\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <li key={props.task.id} className={props.task.status === TaskStatuses.Completed ? \"is-done\" : \"\"}>\r\n        <Checkbox\r\n          color='primary'\r\n          inputProps={{ \"aria-label\": \"secondary checkbox\" }}\r\n          onChange={onChangeStatusHandler}\r\n          checked={props.task.status === TaskStatuses.Completed}\r\n          disabled={props.disabled}\r\n        />\r\n        <EditableSpan value={props.task.title} newTitle={addNewTitle} disabled={props.disabled} />\r\n        <IconButton onClick={removeTaskHandler} disabled={props.disabled}>\r\n          <DeleteForever />\r\n        </IconButton>\r\n      </li>\r\n    </>\r\n  );\r\n});\r\n","import React, { useCallback, useEffect } from \"react\";\r\nimport { Title } from \"../formItems/Title\";\r\nimport { EditableSpan } from \"../ editableSpan/EditableSpan\";\r\nimport { Button, IconButton } from \"@material-ui/core\";\r\nimport { DeleteForever } from \"@material-ui/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { RootStateType } from \"../../state/store\";\r\nimport { addTaskThunk, fetchTasksTC } from \"../../state/reducers/tasks-reducer\";\r\nimport { Task } from \"./tasks/Tasks\";\r\nimport { FilterValuesType, TodolistDomainType } from \"../../state/reducers/todolist-reducer\";\r\nimport { TaskType } from \"../../api/tasks-api\";\r\n\r\ntype PropsType = {\r\n  todolist: TodolistDomainType;\r\n  removeTodolist: (id: string) => void;\r\n  changeFilter: (value: FilterValuesType, todolistId: string) => void;\r\n  newTodolistTitle: (newTitle: string, id: string) => void;\r\n};\r\n\r\nexport const Todolist: React.FC<PropsType> = (props) => {\r\n  const tasks = useSelector<RootStateType, Array<TaskType>>((state) => state.tasks[props.todolist.id]);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchTasksTC(props.todolist.id));\r\n  }, [dispatch, props.todolist.id]);\r\n\r\n  const removeTodolistHandler = useCallback(() => {\r\n    props.removeTodolist(props.todolist.id);\r\n    // }, [props.id, props.removeTodolist, props]);\r\n  }, [props]);\r\n\r\n  const addTaskItem = useCallback(\r\n    (title: string) => {\r\n      dispatch(addTaskThunk(props.todolist.id, title));\r\n    },\r\n    // [dispatch, props.id, props]\r\n    [dispatch, props]\r\n  );\r\n\r\n  const addNewTitle = useCallback(\r\n    (newTitle: string) => {\r\n      props.newTodolistTitle(props.todolist.id, newTitle);\r\n    },\r\n    // [props.id, props.newTodolistTitle, props]\r\n    [props]\r\n  );\r\n\r\n  const onAllClickHandler = useCallback(() => props.changeFilter(\"all\", props.todolist.id), [\r\n    // props.changeFilter,\r\n    // props.id,\r\n    // props,\r\n    props,\r\n  ]);\r\n  const onActiveClickHandler = useCallback(() => props.changeFilter(\"active\", props.todolist.id), [\r\n    // props.changeFilter,\r\n    // props.id,\r\n    props,\r\n  ]);\r\n  const onCompletedClickHandler = useCallback(() => props.changeFilter(\"completed\", props.todolist.id), [\r\n    // props.changeFilter,\r\n    // props.id,\r\n    props,\r\n  ]);\r\n\r\n  let allTaskForTodolist = tasks;\r\n  let tasksForTodolist = allTaskForTodolist;\r\n\r\n  if (props.todolist.filter === \"active\") {\r\n    tasksForTodolist = allTaskForTodolist.filter((t) => !t.status);\r\n  }\r\n  if (props.todolist.filter === \"completed\") {\r\n    tasksForTodolist = allTaskForTodolist.filter((t) => t.status);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <EditableSpan\r\n          value={props.todolist.title}\r\n          newTitle={addNewTitle}\r\n          disabled={props.todolist.entityStatus === \"loading\"}\r\n        />\r\n        <IconButton\r\n          aria-label='delete'\r\n          onClick={removeTodolistHandler}\r\n          disabled={props.todolist.entityStatus === \"loading\"}\r\n        >\r\n          <DeleteForever />\r\n        </IconButton>\r\n      </h3>\r\n      <Title addTask={addTaskItem} disabled={props.todolist.entityStatus === \"loading\"} />\r\n      <ul className={\"tasks_container\"}>\r\n        {tasksForTodolist.map((t) => {\r\n          return <Task task={t} todolistId={props.todolist.id} key={t.id} disabled={t.entityStatus === \"loading\"} />;\r\n        })}\r\n      </ul>\r\n      <div className={\"btns_container\"}>\r\n        <Button\r\n          color='inherit'\r\n          onClick={onAllClickHandler}\r\n          variant={props.todolist.filter === \"all\" ? \"outlined\" : \"text\"}\r\n        >\r\n          All\r\n        </Button>\r\n        <Button\r\n          color='primary'\r\n          onClick={onActiveClickHandler}\r\n          variant={props.todolist.filter === \"active\" ? \"outlined\" : \"text\"}\r\n        >\r\n          Active\r\n        </Button>\r\n        <Button\r\n          color='secondary'\r\n          onClick={onCompletedClickHandler}\r\n          variant={props.todolist.filter === \"completed\" ? \"outlined\" : \"text\"}\r\n        >\r\n          Completed\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import { Container, Grid, Paper } from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport {\r\n  addTodolistTC,\r\n  changeTodolistFilterAC,\r\n  deleteTodolistTC,\r\n  fetchTodolistsThunk,\r\n  FilterValuesType,\r\n  TodolistDomainType,\r\n  updateTodolistTitle,\r\n} from \"../../state/reducers/todolist-reducer\";\r\nimport { RootStateType } from \"../../state/store\";\r\nimport { Title } from \"../formItems/Title\";\r\nimport { Todolist } from \"./Todolist\";\r\n\r\nexport const TodolistsList = () => {\r\n  const todolists = useSelector<RootStateType, Array<TodolistDomainType>>((state) => state.todolists);\r\n  const isLoggedIn = useSelector<RootStateType, boolean>((state) => state.auth.isLoggedIn);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) return;\r\n    dispatch(fetchTodolistsThunk());\r\n  }, [dispatch]);\r\n\r\n  let removeTodolist = useCallback(\r\n    (id: string) => {\r\n      dispatch(deleteTodolistTC(id));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  let changeFilter = useCallback(\r\n    (value: FilterValuesType, todolistId: string) => {\r\n      dispatch(changeTodolistFilterAC(value, todolistId));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  let addNewTodolist = useCallback(\r\n    (title: string) => {\r\n      dispatch(addTodolistTC(title));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  let newTodolistTitle = useCallback(\r\n    (id: string, newTitle: string) => {\r\n      dispatch(updateTodolistTitle(id, newTitle));\r\n    },\r\n    [dispatch]\r\n  );\r\n\r\n  if (!isLoggedIn) {\r\n    return <Redirect to={\"/login\"} />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Container fixed>\r\n        <Grid container style={{ padding: \"20px 0\" }}>\r\n          <Title addTask={addNewTodolist} />\r\n        </Grid>\r\n        <Grid container spacing={4}>\r\n          {todolists.map((tl) => {\r\n            return (\r\n              <Grid item key={tl.id}>\r\n                <Paper style={{ padding: \"10px\" }} elevation={3}>\r\n                  <Todolist\r\n                    key={tl.id}\r\n                    todolist={tl}\r\n                    removeTodolist={removeTodolist}\r\n                    changeFilter={changeFilter}\r\n                    newTodolistTitle={newTodolistTitle}\r\n                  />\r\n                </Paper>\r\n              </Grid>\r\n            );\r\n          })}\r\n        </Grid>\r\n      </Container>\r\n    </>\r\n  );\r\n};\r\n","import { CircularProgress, Container, Grid } from \"@material-ui/core\";\r\nimport \"./App.css\";\r\nimport { Header } from \"./components/header/Header\";\r\nimport { ErrorSnackbar } from \"./components/errorSnackbar/ErrorSnackbar\";\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\nimport { Login } from \"./components/features/login/Login\";\r\nimport { TodolistsList } from \"./components/todolists/TodolistsList\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { initializeAppTC } from \"./state/reducers/auth-reducer\";\r\nimport { RootStateType } from \"./state/store\";\r\n\r\nexport const App = () => {\r\n  const isInitialized = useSelector<RootStateType>((state) => state.auth.isInitialized);\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    dispatch(initializeAppTC());\r\n  }, []);\r\n\r\n  // if (!isInitialized) {\r\n  //   return (\r\n  //     <div style={{ position: \"fixed\", top: \"50%\", textAlign: \"center\", width: \"100%\" }}>\r\n  //       <CircularProgress />\r\n  //     </div>\r\n  //   );\r\n  // }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ErrorSnackbar />\r\n      <Header />\r\n      <Container fixed className={\"container\"}>\r\n        <Grid container justify=\"center\" spacing={4}>\r\n          <Switch>\r\n            <Route exact path={\"/\"} render={() => <TodolistsList />} />\r\n            <Route path={\"/login\"} render={() => <Login />} />\r\n            <Route path={\"/404\"} render={() => <h1>404: PAGE NOT FOUND</h1>} />\r\n            <Redirect from={\"*\"} to={\"/404\"} />\r\n          </Switch>\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport { todolistReducer } from \"./reducers/todolist-reducer\";\r\nimport { tasksReducer } from \"./reducers/tasks-reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { appReducer } from \"./reducers/app-reducer\";\r\nimport { authReducer } from \"./reducers/auth-reducer\";\r\n\r\nexport type RootStateType = ReturnType<typeof rootReducers>;\r\n\r\nconst rootReducers = combineReducers({\r\n  todolists: todolistReducer,\r\n  tasks: tasksReducer,\r\n  app: appReducer,\r\n  auth: authReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducers, applyMiddleware(thunk));\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./state/store\";\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}